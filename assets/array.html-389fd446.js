import{_ as o,r as p,o as c,c as r,a as s,b as l,w as e,d as n,e as t}from"./app-56dc5881.js";const D={},d=s("h1",{id:"数组",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#数组","aria-hidden":"true"},"#"),n(" 数组")],-1),i={class:"table-of-contents"},y=t(`<h2 id="_1-数组的定义" tabindex="-1"><a class="header-anchor" href="#_1-数组的定义" aria-hidden="true">#</a> 1. 数组的定义</h2><h2 id="_2-c-数组" tabindex="-1"><a class="header-anchor" href="#_2-c-数组" aria-hidden="true">#</a> 2. C++ 数组</h2><h2 id="_3-python-数组" tabindex="-1"><a class="header-anchor" href="#_3-python-数组" aria-hidden="true">#</a> 3. Python 数组</h2><p>本节探索基于数组的序列，主要基于 Python 语言的几种序列类 <code>list</code>、<code>tuple</code> 和 <code>str</code>。这些类都是序列类型的，都支持下标取值 <code>seq[i]</code>。</p><h3 id="_3-1-低层次数组" tabindex="-1"><a class="header-anchor" href="#_3-1-低层次数组" aria-hidden="true">#</a> 3.1 低层次数组</h3><p>Python 不包含底层的连续数组，Python 的数组类型（不包含 <code>array.array</code> 或第三方库）都是引用类型的数组。Python 数组内的每一个值都是一个对象引用，复制它们会产生一个经典问题，即 Python 的 <strong>浅拷贝和深拷贝</strong>。</p><p>关于 Python 引用对象的本质本章不会考虑，本章节先考虑 Python 内置的连续数组，然后实现一个底层上连续的数组类型，以模拟动态数组的特点。</p><h3 id="_3-2-使用紧凑数组" tabindex="-1"><a class="header-anchor" href="#_3-2-使用紧凑数组" aria-hidden="true">#</a> 3.2 使用紧凑数组</h3><p><code>array.array</code> 是标准库内的紧凑数组类型。有时候，使用 <code>array</code> 类型将比内置的整数类型获得更高的储存性能。</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> array </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> array</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">primes = array(</span><span style="color:#CE9178;">&#39;i&#39;</span><span style="color:#D4D4D4;">, [</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">11</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">13</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">17</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">19</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span></code></pre></div><p>我们在调用 <code>primes[3]</code> 时得到的是一个整型值（<code>int</code> 类型），这意味获取下标时，Python 将底层值自动转为 <code>int</code> 类型，不需要考虑类型转换问题。</p><p>其中 <code>&#39;i&#39;</code> 是标志码，表示实际储存的类型，可用的标志码如下：</p><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:left;">数据类型</th><th style="text-align:left;">Python 类型</th><th style="text-align:center;">字节数</th></tr></thead><tbody><tr><td style="text-align:center;"><code>&#39;b&#39;</code></td><td style="text-align:left;"><code>signed char</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;"><code>&#39;B&#39;</code></td><td style="text-align:left;"><code>unsigned char</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;"><code>&#39;u&#39;</code></td><td style="text-align:left;"><code>wchar_t</code></td><td style="text-align:left;">Unicode 字符</td><td style="text-align:center;">2 或 4</td></tr><tr><td style="text-align:center;"><code>&#39;h&#39;</code></td><td style="text-align:left;"><code>signed short</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;"><code>&#39;H&#39;</code></td><td style="text-align:left;"><code>unsigned short</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;"><code>&#39;i&#39;</code></td><td style="text-align:left;"><code>signed int</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">2 或 4</td></tr><tr><td style="text-align:center;"><code>&#39;I&#39;</code></td><td style="text-align:left;"><code>unsigned int</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">2 或 4</td></tr><tr><td style="text-align:center;"><code>&#39;l&#39;</code></td><td style="text-align:left;"><code>signed long</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">4</td></tr><tr><td style="text-align:center;"><code>&#39;L&#39;</code></td><td style="text-align:left;"><code>unsigned long</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">4</td></tr><tr><td style="text-align:center;"><code>&#39;q&#39;</code></td><td style="text-align:left;"><code>signed long long</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">8</td></tr><tr><td style="text-align:center;"><code>&#39;Q&#39;</code></td><td style="text-align:left;"><code>unsigned long long</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:center;">8</td></tr><tr><td style="text-align:center;"><code>&#39;f&#39;</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:center;">4</td></tr><tr><td style="text-align:center;"><code>&#39;d&#39;</code></td><td style="text-align:left;"><code>double</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:center;">8</td></tr></tbody></table><h3 id="_3-3-动态数组" tabindex="-1"><a class="header-anchor" href="#_3-3-动态数组" aria-hidden="true">#</a> 3.3 动态数组</h3><p>Python 的列表类提供了对底层数组的抽象，该列表运行增添元素，对于列表内元素的总数没有明显的限制。为了提供这种抽象，Python 使用了 <strong>动态数组</strong>。</p>`,15),h=s("p",null,[n("一个列表通常关联一个底层数组，，该数组通常比列表的长度更长。如果用户创建了具有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"5")]),s("annotation",{encoding:"application/x-tex"},"5")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"5")])])]),n(" 个元素的列表，系统可能会预留能储存 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"8")]),s("annotation",{encoding:"application/x-tex"},"8")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"8")])])]),n(" 个对象引用的底层数组。通过利用下面可用的储存单元，这样增添列表就会变得容易。")],-1),C=t(`<p>如果用户持续添加元素，那么最终储存空间会被耗尽。此时，应该向系统请求一个新的，更大的数组，然后用原来的值初始化该数组。这样，原来的储存空间就不需要了，被系统回收。这种策略直观看上去像寄居蟹一样。</p><p>Python 的 <code>list</code> 类确实基于这种策略，使用 <code>sys.getsizeof()</code> 可以得到对象的底层大小。我们可以做个实验证明：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">data = []</span></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> k </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    a = </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(data)</span></span>
<span class="line"><span style="color:#D4D4D4;">    b = sys.getsizeof(data)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;[Length]: </span><span style="color:#569CD6;">{:3d}</span><span style="color:#CE9178;">, [Size]: </span><span style="color:#569CD6;">{:4d}</span><span style="color:#CE9178;">&#39;</span><span style="color:#D4D4D4;">.format(a, b))</span></span>
<span class="line"><span style="color:#D4D4D4;">    data.append(</span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>结果：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">0, [Size]</span><span style="color:#D4D4D4;">:   </span><span style="color:#B5CEA8;">56</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">1, [Size]</span><span style="color:#D4D4D4;">:   </span><span style="color:#B5CEA8;">88</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">2, [Size]</span><span style="color:#D4D4D4;">:   </span><span style="color:#B5CEA8;">88</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">3, [Size]</span><span style="color:#D4D4D4;">:   </span><span style="color:#B5CEA8;">88</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">4, [Size]</span><span style="color:#D4D4D4;">:   </span><span style="color:#B5CEA8;">88</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">5, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">120</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">6, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">120</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">7, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">120</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">8, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">120</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:   </span><span style="color:#569CD6;">9, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">184</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">10, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">184</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">11, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">184</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">12, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">184</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">13, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">184</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">14, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">184</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">15, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">184</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">16, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">184</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">17, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">248</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">18, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">248</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">19, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">248</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">20, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">248</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">21, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">248</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">22, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">248</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">23, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">248</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">24, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">248</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">25, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">312</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">26, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">312</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">27, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">312</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">28, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">312</span></span>
<span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">Length</span><span style="color:#D4D4D4;">]:  </span><span style="color:#569CD6;">29, [Size]</span><span style="color:#D4D4D4;">:  </span><span style="color:#B5CEA8;">312</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function g(u,x){const a=p("router-link");return c(),r("div",null,[d,s("nav",i,[s("ul",null,[s("li",null,[l(a,{to:"#_1-数组的定义"},{default:e(()=>[n("1. 数组的定义")]),_:1})]),s("li",null,[l(a,{to:"#_2-c-数组"},{default:e(()=>[n("2. C++ 数组")]),_:1})]),s("li",null,[l(a,{to:"#_3-python-数组"},{default:e(()=>[n("3. Python 数组")]),_:1}),s("ul",null,[s("li",null,[l(a,{to:"#_3-1-低层次数组"},{default:e(()=>[n("3.1 低层次数组")]),_:1})]),s("li",null,[l(a,{to:"#_3-2-使用紧凑数组"},{default:e(()=>[n("3.2 使用紧凑数组")]),_:1})]),s("li",null,[l(a,{to:"#_3-3-动态数组"},{default:e(()=>[n("3.3 动态数组")]),_:1})])])])])]),y,h,C])}const v=o(D,[["render",g],["__file","array.html.vue"]]);export{v as default};
