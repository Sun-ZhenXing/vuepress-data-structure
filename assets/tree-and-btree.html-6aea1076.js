import{_ as m,M as u,p as h,q as d,R as s,N as t,V as n,t as a}from"./framework-8980b429.js";const g={},_=s("h1",{id:"树和二叉树",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#树和二叉树","aria-hidden":"true"},"#"),a(" 树和二叉树")],-1),k={class:"table-of-contents"},x=s("h2",{id:"_1-基础概念",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-基础概念","aria-hidden":"true"},"#"),a(" 1. 基础概念")],-1),y=s("h3",{id:"_1-1-无根树",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-1-无根树","aria-hidden":"true"},"#"),a(" 1.1 无根树")],-1),w=s("strong",null,"树",-1),v=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])],-1),b=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,">"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"n > 0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])],-1),f=s("ul",null,[s("li",null,"除了根结点外，每个子结点可以分为零或多个不相交的子树"),s("li",null,"每个结点都只有有限个子结点或无子结点")],-1),M=s("p",null,[a("根据上述性质，树也可以被定义为有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" 个结点，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" 条边的连通无向图。")],-1),N=s("strong",null,"无根树",-1),z=s("strong",null,"根",-1),A=s("strong",null,"有根树",-1),L=s("p",null,"下面的定义既适用于无根树，也适用于有根树。",-1),B=s("strong",null,"森林",-1),T=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m")]),s("annotation",{encoding:"application/x-tex"},"m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"m")])])],-1),C=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m"),s("mo",null,">"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"m > 0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},">"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])],-1),Z=s("strong",null,"生成树",-1),H=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n"),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n - 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])],-1),V=s("strong",null,"叶结点",-1),D=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])],-1),E=s("h3",{id:"_1-2-有根树",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-2-有根树","aria-hidden":"true"},"#"),a(" 1.2 有根树")],-1),U=s("p",null,"本文主要讨论有根树，若上下文没有明确指明，则默认指代的是有根树。下面的定义应用于有根树。",-1),O=s("p",null,"结点的概念：",-1),Q=s("strong",null,"结点的度",-1),R=s("strong",null,"叶子结点",-1),X=s("strong",null,"终端结点",-1),Y=s("strong",null,"分支结点",-1),K=s("strong",null,"非终端结点",-1),S=s("p",null,"结点和结点的关系：",-1),j=s("strong",null,"根结点",-1),J=s("strong",null,"路径",-1),G=s("strong",null,"父结点",-1),q=s("strong",null,"子结点",-1),F=s("strong",null,"兄弟结点",-1),I=s("strong",null,"堂兄弟结点",-1),P=s("strong",null,"子树",-1),W=s("strong",null,"祖先结点",-1),$=s("strong",null,"后代结点",-1),ss=s("p",null,"树的一些概念：",-1),as=s("strong",null,"结点深度",-1),ns=s("strong",null,"树的高度",-1),ts=s("strong",null,"树的宽度",-1),ls=s("strong",null,"树的大小",-1),es=s("strong",null,"无序树",-1),os=s("strong",null,"有序树",-1),is=s("strong",null,"二叉树",-1),cs=s("strong",null,"N 叉树",-1),ps=s("h3",{id:"_1-3-二叉树的性质",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-3-二叉树的性质","aria-hidden":"true"},"#"),a(" 1.3 二叉树的性质")],-1),us=s("p",null,"二叉树每个结点最多只能包含两个子结点。一般情况下二叉树指的是有序的二叉树，左右结点不可交换。",-1),rs=s("p",null,"二叉树具有如下性质：",-1),ms=s("ol",null,[s("li",null,[a("二叉树的第 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"i")]),s("annotation",{encoding:"application/x-tex"},"i")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6595em"}}),s("span",{class:"mord mathnormal"},"i")])])]),a(" 层最多有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"2^{i-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8247em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8247em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])]),a(" 个节点")]),s("li",null,[a("深度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k")]),s("annotation",{encoding:"application/x-tex"},"k")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),a(" 的二叉树最多有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"k")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"2^k-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9324em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" 个节点")]),s("li",null,[a("任意二叉树 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T")]),s("annotation",{encoding:"application/x-tex"},"T")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T")])])]),a(" ，终端节点数为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mn",null,"0")])]),s("annotation",{encoding:"application/x-tex"},"n_0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" ，度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(" 的节点数为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"n_2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" ，那么 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"n"),s("mn",null,"0")]),s("mo",null,"="),s("msub",null,[s("mi",null,"n"),s("mn",null,"2")]),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"n_0 = n_2 + 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"0")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"n"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])]),s("li",null,[a("具有 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"n")]),s("annotation",{encoding:"application/x-tex"},"n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"n")])])]),a(" 个节点的完全二叉树的深度为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"⌊"),s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mn",null,"2")]),s("mi",null,"n"),s("mo",{stretchy:"false"},"⌋"),s("mo",null,"+"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"\\lfloor\\log_2n\\rfloor + 1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"⌊"),s("span",{class:"mop"},[s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.207em"}},[s("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2441em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},"⌋"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])])])],-1),hs=s("p",null,"下面是一些特殊的二叉树：",-1),ds=s("strong",null,"满二叉树",-1),gs=s("strong",null,"完美二叉树",-1),_s=s("strong",null,"完全二叉树",-1),ks=s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])],-1),xs=s("h2",{id:"_2-树的储存结构",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-树的储存结构","aria-hidden":"true"},"#"),a(" 2. 树的储存结构")],-1),ys=s("h3",{id:"_2-1-父结点表示法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-1-父结点表示法","aria-hidden":"true"},"#"),a(" 2.1 父结点表示法")],-1),ws=s("p",null,"使用数组保存结点，结点保存父结点的位置。利用除了根结点以外的所有结点都有父结点这一性质，容易找到父结点，但要找到子结点必须遍历整个数组。其定义如下：",-1),vs=s("div",{class:"language-cpp","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token keyword"},"const"),a(),s("span",{class:"token keyword"},"int"),a(" m "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token keyword"},"struct"),a(),s("span",{class:"token class-name"},"Node"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"int"),a(" val"),s("span",{class:"token punctuation"},","),a(" parent"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),a(`
Node tree`),s("span",{class:"token punctuation"},"["),a("m"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";"),a(`
`)])])],-1),bs=s("div",{class:"language-python","data-ext":"py"},[s("pre",{class:"language-python"},[s("code",null,[s("span",{class:"token keyword"},"class"),a(),s("span",{class:"token class-name"},"Node"),s("span",{class:"token punctuation"},":"),a(`
    `),s("span",{class:"token keyword"},"def"),a(),s("span",{class:"token function"},"__init__"),s("span",{class:"token punctuation"},"("),a("self"),s("span",{class:"token punctuation"},","),a(" val"),s("span",{class:"token punctuation"},":"),a(),s("span",{class:"token builtin"},"int"),s("span",{class:"token punctuation"},","),a(" parent"),s("span",{class:"token punctuation"},":"),a(),s("span",{class:"token builtin"},"int"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},":"),a(`
        self`),s("span",{class:"token punctuation"},"."),a("val "),s("span",{class:"token operator"},"="),a(` val
        self`),s("span",{class:"token punctuation"},"."),a("parent "),s("span",{class:"token operator"},"="),a(` parent
`)])])],-1),fs=s("h3",{id:"_2-2-子结点表示法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-2-子结点表示法","aria-hidden":"true"},"#"),a(" 2.2 子结点表示法")],-1),Ms=s("p",null,"只能从根结点遍历得到其子结点，不能找到父结点，而且子结点的个数有限制。其定义如下：",-1),Ns=s("div",{class:"language-cpp","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token keyword"},"struct"),a(),s("span",{class:"token class-name"},"Node"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"int"),a(" val"),s("span",{class:"token punctuation"},";"),a(`
    Node`),s("span",{class:"token operator"},"*"),a(" children"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),a(`
Node tree`),s("span",{class:"token punctuation"},";"),a(`
`)])])],-1),zs=s("div",{class:"language-python","data-ext":"py"},[s("pre",{class:"language-python"},[s("code",null,[s("span",{class:"token keyword"},"class"),a(),s("span",{class:"token class-name"},"Node"),s("span",{class:"token punctuation"},":"),a(`
    `),s("span",{class:"token keyword"},"def"),a(),s("span",{class:"token function"},"__init__"),s("span",{class:"token punctuation"},"("),a("self"),s("span",{class:"token punctuation"},","),a(" val"),s("span",{class:"token punctuation"},":"),a(),s("span",{class:"token builtin"},"int"),s("span",{class:"token punctuation"},","),a(" children"),s("span",{class:"token punctuation"},":"),a(),s("span",{class:"token string"},"'list[Node]'"),a(),s("span",{class:"token operator"},"="),a(),s("span",{class:"token boolean"},"None"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},":"),a(`
        self`),s("span",{class:"token punctuation"},"."),a("val "),s("span",{class:"token operator"},"="),a(` val
        self`),s("span",{class:"token punctuation"},"."),a("children "),s("span",{class:"token operator"},"="),a(" children "),s("span",{class:"token keyword"},"if"),a(" children "),s("span",{class:"token keyword"},"else"),a(),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),a(`
`)])])],-1),As=s("h3",{id:"_2-3-父亲孩子表示法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-3-父亲孩子表示法","aria-hidden":"true"},"#"),a(" 2.3 父亲孩子表示法")],-1),Ls=s("p",null,[a("也称为 "),s("strong",null,"树型双链表"),a(" 结构，每个结点有两个指针域。其定义如下：")],-1),Bs=s("div",{class:"language-cpp","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token keyword"},"const"),a(),s("span",{class:"token keyword"},"int"),a(" m "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token number"},"10"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token keyword"},"struct"),a(),s("span",{class:"token class-name"},"Node"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"int"),a(" val"),s("span",{class:"token punctuation"},";"),a(`
    Node`),s("span",{class:"token operator"},"*"),a(" children"),s("span",{class:"token punctuation"},"["),a("m"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},";"),a(`
    Node`),s("span",{class:"token operator"},"*"),a(" father"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`)])])],-1),Ts=s("div",{class:"language-python","data-ext":"py"},[s("pre",{class:"language-python"},[s("code",null,[s("span",{class:"token keyword"},"class"),a(),s("span",{class:"token class-name"},"Node"),s("span",{class:"token punctuation"},":"),a(`
    `),s("span",{class:"token keyword"},"def"),a(),s("span",{class:"token function"},"__init__"),s("span",{class:"token punctuation"},"("),a("self"),s("span",{class:"token punctuation"},","),a(" val"),s("span",{class:"token punctuation"},":"),a(),s("span",{class:"token builtin"},"int"),s("span",{class:"token punctuation"},","),a(" children"),s("span",{class:"token punctuation"},":"),a(),s("span",{class:"token string"},"'list[Node]'"),a(),s("span",{class:"token operator"},"="),a(),s("span",{class:"token boolean"},"None"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},":"),a(`
        self`),s("span",{class:"token punctuation"},"."),a("val "),s("span",{class:"token operator"},"="),a(` val
        self`),s("span",{class:"token punctuation"},"."),a("children "),s("span",{class:"token operator"},"="),a(" children "),s("span",{class:"token keyword"},"if"),a(" children "),s("span",{class:"token keyword"},"else"),a(),s("span",{class:"token punctuation"},"["),s("span",{class:"token punctuation"},"]"),a(`
`)])])],-1),Cs=s("h3",{id:"_2-4-孩子兄弟表示法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-4-孩子兄弟表示法","aria-hidden":"true"},"#"),a(" 2.4 孩子兄弟表示法")],-1),Zs=s("p",null,[a("也称为 "),s("strong",null,"二叉树型表示法"),a("，它是一种树型双链表结构，每个结点包含一个数据域和两个指针域，一个指向子结点，另一个指向兄弟结点。其定义如下：")],-1),Hs=s("div",{class:"language-cpp","data-ext":"cpp"},[s("pre",{class:"language-cpp"},[s("code",null,[s("span",{class:"token keyword"},"struct"),a(),s("span",{class:"token class-name"},"Node"),a(),s("span",{class:"token punctuation"},"{"),a(`
    `),s("span",{class:"token keyword"},"int"),a(" val"),s("span",{class:"token punctuation"},";"),a(`
    Node`),s("span",{class:"token operator"},"*"),a(" child"),s("span",{class:"token punctuation"},","),a(" next"),s("span",{class:"token punctuation"},";"),a(`
`),s("span",{class:"token punctuation"},"}"),a(`
`)])])],-1),Vs=s("div",{class:"language-python","data-ext":"py"},[s("pre",{class:"language-python"},[s("code",null,[s("span",{class:"token keyword"},"class"),a(),s("span",{class:"token class-name"},"Node"),s("span",{class:"token punctuation"},":"),a(`
    `),s("span",{class:"token keyword"},"def"),a(),s("span",{class:"token function"},"__init__"),s("span",{class:"token punctuation"},"("),a("self"),s("span",{class:"token punctuation"},","),a(" val"),s("span",{class:"token punctuation"},":"),a(),s("span",{class:"token builtin"},"int"),s("span",{class:"token punctuation"},","),a(" nextnode"),s("span",{class:"token punctuation"},":"),a(),s("span",{class:"token string"},"'Node'"),a(),s("span",{class:"token operator"},"="),a(),s("span",{class:"token boolean"},"None"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},":"),a(`
        self`),s("span",{class:"token punctuation"},"."),a("val "),s("span",{class:"token operator"},"="),a(` val
        self`),s("span",{class:"token punctuation"},"."),a("nextnode "),s("span",{class:"token operator"},"="),a(` nextnode
`)])])],-1);function Ds(Es,Us){const e=u("router-link"),l=u("Badge"),r=u("Mermaid"),p=u("CodeTabs");return h(),d("div",null,[_,s("nav",k,[s("ul",null,[s("li",null,[t(e,{to:"#_1-基础概念"},{default:n(()=>[a("1. 基础概念")]),_:1}),s("ul",null,[s("li",null,[t(e,{to:"#_1-1-无根树"},{default:n(()=>[a("1.1 无根树")]),_:1})]),s("li",null,[t(e,{to:"#_1-2-有根树"},{default:n(()=>[a("1.2 有根树")]),_:1})]),s("li",null,[t(e,{to:"#_1-3-二叉树的性质"},{default:n(()=>[a("1.3 二叉树的性质")]),_:1})])])]),s("li",null,[t(e,{to:"#_2-树的储存结构"},{default:n(()=>[a("2. 树的储存结构")]),_:1}),s("ul",null,[s("li",null,[t(e,{to:"#_2-1-父结点表示法"},{default:n(()=>[a("2.1 父结点表示法")]),_:1})]),s("li",null,[t(e,{to:"#_2-2-子结点表示法"},{default:n(()=>[a("2.2 子结点表示法")]),_:1})]),s("li",null,[t(e,{to:"#_2-3-父亲孩子表示法"},{default:n(()=>[a("2.3 父亲孩子表示法")]),_:1})]),s("li",null,[t(e,{to:"#_2-4-孩子兄弟表示法"},{default:n(()=>[a("2.4 孩子兄弟表示法")]),_:1})])])])])]),x,y,s("p",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),w,a("（tree）是由 "),v,a("（"),b,a("）个有限结点组成一个具有层次关系的集合。如果指定一个根结点，那么树要求有下列性质：")]),f,M,s("p",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(" 一个没有固定根结点的树称为 "),N,a("（unrooted tree）。指定一个结点称为 "),z,a("（root），则形成一棵 "),A,a("（rooted tree）。有根树也可以表示为有向图。")]),L,s("ul",null,[s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),B,a("（forest）：每个连通分量（连通块）都是树的图。按照定义，森林即 "),T,a("（"),C,a("）棵树，一棵树也是森林")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),Z,a("（spanning tree）：一个连通无向图的生成子图，同时要求是树。也即在图的边集中选择 "),H,a(" 条，将所有顶点连通")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),V,a("（leaf node）：度数不超过 "),D,a(" 的结点，此处的度定义为图的度，若是有向图则是入度和出度")])]),E,U,O,s("ul",null,[s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),Q,a("（degree）：结点拥有子树的数量")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),R,a("（leaf node）：没有孩子的结点成为叶子结点，也叫 "),X]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),Y,a("（branch node）：不是叶子结点的结点，也叫 "),K])]),S,s("ul",null,[s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),j,a("（root）：树的最上层的结点，任何非空的树都有一个结点")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),J,a("（path）：从起始结点到终止结点经历过的边")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),G,a("（parent）：除了根结点，每个结点的上一层边连接的结点就是它的父结点，也叫")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),q,a("（children）：每个结点由边指向的下一层结点")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),F,a("（siblings）：同一个父结点并且处在同一层的结点")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),I,a("(cousins)：父结点在同一层的结点互为堂兄弟")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),P,a("（subtree）：每个结点包含它所有的后代组成的子树")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),W,a("（ancestor）：从根到该结点上的任意结点")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),$,a("（descendant）：该结点子树的任意结点")])]),ss,s("ul",null,[s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),as,a("（depth）：到根结点的路径上的边数")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),ns,a("（height）：所有结点的深度的最大值加一")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),ts,a("（width）：包含最多结点的层级的结点数")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),ls,a("（size）：树的结点总数")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),es,a("：子树是没有次序排列的，否则是 "),os]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),is,a("（binary tree）：是一种简单的树，它的每个结点最多只能包含两个子结点")]),s("li",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),cs,a("（N-ary tree）：N 叉树的每个结点可最多包含 N 个子树")])]),ps,us,rs,ms,hs,s("p",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),ds,a("（full binary tree）：如果每个内部结点（非叶结点）都包含两个子结点，就成为满二叉树，示例如下。")]),t(r,{id:"mermaid-206",code:"eJxtz00KwjAQBeB9TzEreV0UOknzp+CqR/ACQVtddFFaBY9vMiCUkLfK9xLCzHOL64tuY0MpDHDbyjFHAerAnAEYisoApqhyPOArdQDCodaALl5ZwBaVA1zlL+7TvH3tIi/y34Sp666k6ERarMRDshEbsU8OYi22yU7sxNyngrm5L3Hfx2mmxzTHz/Km7Uys1u+l+QHMYTT4"}),s("p",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),gs,a("（perfect binary tree）：当所有的叶子结点都在同一层就是完美二叉树，毫无间隙填充了最低层，示例如下。")]),t(r,{id:"mermaid-210",code:"eJxtj80OgjAQhO88xZ7McCBh6R9o4olH8AWIgh44ENDEx3e7xIQ03VO/6XS681yH5UW3viAZBrgs9RinAZoDxrGATaQ4LdBm5A7oEtkBLuPkWr6ucxdxp+NSBjCJzwM+91T257SAXkgGpyEBCDmvNOZcZZYm/K/CVFVXauhERrlRtsJO2Sq3wp2yU+ZaBGZVjCpehKDsd0eM5D0z7EoMZVfc52Hb+nGixzgNn/lN61ncy/dS/AD3dUhY"}),s("p",null,[t(l,{type:"tip"},{default:n(()=>[a("定义")]),_:1}),a(),_s,a("（complete binary tree）：当只有最下面两层结点的度数可以小于 "),ks,a("，并且最底层的槽被毫无间隙地从左到右填充，我们就叫它完全二叉树，示例如下。")]),t(r,{id:"mermaid-214",code:"eJxtjbsOgkAQRXu+YkJhLgUJ+97VxIrexh/YKGhBQUATP9/dCQXZcKs5Z25mXkuc33TvK0oRgGgaHnMkIHeYowFdqBwP+AMdgFBoA5iDpujS6263UIAqehawhXKA25Sgtr2SpBMpZsmsExtmzewTB2bDLLokbkBN9XZHsbdJu+oxxXXth5Gewxi/04eWMwk5/y7VH3dZMng="}),xs,ys,ws,t(p,{id:"224",data:[{title:"cpp"},{title:"python"}],"tab-id":"code"},{tab0:n(({title:o,value:i,isActive:c})=>[vs]),tab1:n(({title:o,value:i,isActive:c})=>[bs]),_:1}),fs,Ms,t(p,{id:"238",data:[{title:"cpp"},{title:"python"}],"tab-id":"code"},{tab0:n(({title:o,value:i,isActive:c})=>[Ns]),tab1:n(({title:o,value:i,isActive:c})=>[zs]),_:1}),As,Ls,t(p,{id:"252",data:[{title:"cpp"},{title:"python"}],"tab-id":"code"},{tab0:n(({title:o,value:i,isActive:c})=>[Bs]),tab1:n(({title:o,value:i,isActive:c})=>[Ts]),_:1}),Cs,Zs,t(p,{id:"266",data:[{title:"cpp"},{title:"python"}],"tab-id":"code"},{tab0:n(({title:o,value:i,isActive:c})=>[Hs]),tab1:n(({title:o,value:i,isActive:c})=>[Vs]),_:1})])}const Qs=m(g,[["render",Ds],["__file","tree-and-btree.html.vue"]]);export{Qs as default};
